openapi: 3.0.1
info:
  title: SECA API
  description: API for the SECA application
  contact:
    url: https://github.com/isel-leic-ipw/seca-ipw-p1-leic2324i-ipw33d-g04
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - description: Localhost server for testing SECA API
    url: http://localhost:2003

security:
  - bearerAuth: []
tags:
 - name: event
 - name: group
 - name: user
paths:
  /event/list:
    get:
      tags:
      - event
      summary: popular events
      description: Get list of events 
      operationId: getPopularEventsList
      security: 
        - bearerAuth: []
      parameters:
        - name: s
          in: query
          description: Number of returned events
          schema: 
            default: 30
            minimum: 0
            type: integer
          required: false
        - name: p
          in: query
          description: Page number
          schema:
            default: 1
            minimum: 0
            type: integer
          required: false
      responses:
        200:
          description: popular events displayed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          $ref: "#/components/responses/400BadRequest"
        404:
          $ref: "#/components/responses/404NotFound" 
  /event/search/{name}:
    get:
      tags:
      - event
      summary: search for events
      description: Search events by specific event name
      operationId: getEventNames
      security: 
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          description: Name of the event
          schema: 
            type: string
          required: true
        - name: s
          in: query
          description: Number of returned events
          schema: 
            default: 30
            minimum: 0
            type: integer
          required: false
        - name: p
          in: query
          description: Page number
          schema:
            default: 1
            minimum: 0
            type: integer
          required: false
      responses:
        200:
          description: event displayed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          $ref: "#/components/responses/400BadRequest"
        404:
          $ref: "#/components/responses/404NotFound"  
  /group/add:
    put:
      tags:
      - group
      summary: add events to a group
      operationId: addEvents
      security:
        - bearerAuth: []
      requestBody:
        description: Event to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperationEvent'
      responses:
        201:
          description: group added
          content: {}
        400:
          $ref: "#/components/responses/400BadRequest"
  /group/remove:
    delete:
      tags:
      - group
      summary: Remove events from a group
      description: Removes an event of the group
      operationId: removeEvents
      security:
        - bearerAuth: []
      requestBody:
        description: Event to remove
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperationEvent'
      responses:
        200:
          description: "Event successfully deleted"
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        400:
          $ref: "#/components/responses/400BadRequest"
        404:
          $ref: "#/components/responses/404NotFound"
  /group:
    post:
      tags:
      - group
      summary: create groups
      description: Creates a group
        Tasks
      operationId: createGroups
      security: 
        - bearerAuth: []
      requestBody:
        description: Group to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGroup'
        required: true
      responses:
        201:
          description: group created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        400:
          description: Invalid input, object invalid
          content: {}        
    put:
      tags:
      - group
      summary: edit a group
      description: Edits a group in the system
      operationId: editGroup
      security:
        - bearerAuth: []
      requestBody:
        description: Group to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditGroup'
        required: true
      responses:
        201:
          description: Group updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
                  
        404:
          $ref: "#/components/responses/404NotFound" 
  /group/list:
    get:
      tags:
      - group
      summary: get Groups List
      description: groups of the user
      operationId: getGroups
      responses:
        200:
          description: get all groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        400:
          $ref: "#/components/responses/400BadRequest"   
  /group/{id}:
    get:
      tags:
      - group
      summary: get Group
      description: By passing it's id
      operationId: getGroup
      parameters:
      - name: id
        in: path
        description: ID of a group
        required: true
        schema:
          minimum: 1
          type: integer
      responses:
        200:
          description: get all groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        400:
          $ref: "#/components/responses/400BadRequest" 
    delete:
      tags:
      - group
      summary: deletes a group
      description: Deletes a group of the system
      operationId: deleteGroup
      security: 
        - bearerAuth: []
      parameters:
      - name: id
        in: path
        description: ID of the group to be deleted
        required: true
        schema:
          type: integer
      responses:
        200:
          description: group deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        400:
          $ref: "#/components/responses/400BadRequest"
        404:
          $ref: "#/components/responses/404NotFound"
  /user:
    post:
      tags:
      - user
      summary: Create a user
      description: Creates a User
      operationId: CreateUser
      security: []
      requestBody:
        description: User to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        required: true
      responses:
        201:
          description: user created
          content:
            application/json:
              schema:
                required:
                - token
                type: object
                properties:
                  token:
                    type: string
                    format: uuid
        400:
          description: Invalid input, object invalid
          content: {}
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    OperationEvent:
      required:
      - eventId
      - groupId
      type: object
      properties:
        eventId:
          type: string
          example: Z7r9jZ1Adxe8I
        groupId:
          type: integer
          example: 1 
    NewGroup:
      required:
      - name
      - description
      type: object
      properties:
        name:
          type: string
          example: name7
        description:
          type: string
          example: teste 1234
    EditGroup:
      required:
      - groupId
      - newName
      - newDescription
      type: object
      properties:
        groupId:
          type: integer
          example: 2
        newName:
          type: string
          example: Music
        newDescription:
          type: string
          example: Portugal singers
    NewUser:
      type: object
      required:
      - name
      properties:
        name:
          type: string
          example: inacio
    Event:
      required:
      - id
      - name
      - date
      - segment
      - genre
      type: object
      properties:
        id:
          type: string
          example: Z7r9jZ1Adxe8P
        name:
          type: string
          example: Hamilton
        date:
          type: string
          example: 2024-03-30T18:00:00Z
        segment:
          type: string
          example: Arts & Theatre
        genre:
          type: string
          example: Theatre
    Events:
      allOf: 
        - type: array
          items:
            $ref: "#/components/schemas/Event"

    Group:
      required:
      - id
      - userId
      - name
      - description
      - events
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        name:
          type: string
          example: Develop yourself to get skills on back-end and front-end 
        description:
          type: string
          example: Develop yourself to get skills on back-end and front-end 
        events:
          type: array
          items:
            $ref: '#/components/schemas/Events'
    MissingParameter:
      type: object
      properties:
        error:
          type: string
          example: "Missing required parameter"
    InvalidBody:
      type: object
      properties:
        error:
          type: string
          example: "Invalid body content"
    NotFound: 
      type: object
      properties:
        uri:
          type: string
          format: uri
          example: "/event/1"
        description:
          type: string
          example: "Event with id 1 not found"
  responses: 
    404NotFound:
      description: "Resource not found"
      content: 
        application/json:
          schema: 
            $ref: "#/components/schemas/NotFound"
    400BadRequest:
      description: "Invalid Request because of a missing Parameter or invalid body content"
      content: 
        application/json:
          schema: 
            oneOf:
              - $ref: "#/components/schemas/MissingParameter"
              - $ref: "#/components/schemas/InvalidBody"