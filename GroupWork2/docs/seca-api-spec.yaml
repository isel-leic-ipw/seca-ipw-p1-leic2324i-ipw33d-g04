openapi: 3.0.1
info:
  title: SECA API
  description: API for the SECA application
  contact:
    url: https://github.com/isel-leic-ipw/seca-ipw-p1-leic2324i-ipw33d-g04
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - description: Localhost server for testing SECA API
    url: http://localhost:2003

security:
  - bearerAuth: []
tags:
- name: event
- name: group
- name: user
paths:
  /event/list:
    get:
      tags:
      - event
      summary: popular events
      description: Get list of events 
      operationId: getPopularEventsList
      #parameters:
        # - name: q
        #   in: query
        #   description: Query to match in task title
        #   schema: 
        #     type: string
        #   required: false
      #- name: skip
      #   in: query
      #   description: number of records to skip for pagination
      #   schema:
      #     minimum: 0
      #     type: integer
      # - name: limit
      #   in: query
      #   description: maximum number of records to return
      #   schema:
      #     maximum: 50
      #     minimum: 0
      #     type: integer
      responses:
        200:
          description: popular events displayed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventName'
        400:
          $ref: "#/components/responses/400BadRequest"
        404:
          $ref: "#/components/responses/404NotFound"  
  /event/search:
    get:
      tags:
      - event
      summary: search for events
      description: Search events by default name
      operationId: getEventNames
      #parameters:
        # - name: q
        #   in: query
        #   description: Query to match in task title
        #   schema: 
        #     type: string
        #   required: false
      #- name: skip
      #   in: query
      #   description: number of records to skip for pagination
      #   schema:
      #     minimum: 0
      #     type: integer
      # - name: limit
      #   in: query
      #   description: maximum number of records to return
      #   schema:
      #     maximum: 50
      #     minimum: 0
      #     type: integer
      responses:
        200:
          description: event name displayed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventName'
        400:
          $ref: "#/components/responses/400BadRequest"
        404:
          $ref: "#/components/responses/404NotFound"  
  /event/list/{eventSpec}:
    get:
      tags:
      - event
      summary: popular events
      description: Get list of events 
      operationId: getPopularEventsList
      security: 
        - bearerAuth: []
      #parameters:
        # - name: q
        #   in: query
        #   description: Query to match in task title
        #   schema: 
        #     type: string
        #   required: false
      #- name: skip
      #   in: query
      #   description: number of records to skip for pagination
      #   schema:
      #     minimum: 0
      #     type: integer
      # - name: limit
      #   in: query
      #   description: maximum number of records to return
      #   schema:
      #     maximum: 50
      #     minimum: 0
      #     type: integer
      responses:
        200:
          description: popular events displayed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventName'
        400:
          $ref: "#/components/responses/400BadRequest"
        404:
          $ref: "#/components/responses/404NotFound" 
  /event/search/{eventSpec}:
    get:
      tags:
      - event
      summary: search for events
      description: Search events by specific event name
      operationId: getEventNames
      security: 
        - bearerAuth: []
      #parameters:
        # - name: q
        #   in: query
        #   description: Query to match in task title
        #   schema: 
        #     type: string
        #   required: false
      #- name: skip
      #   in: query
      #   description: number of records to skip for pagination
      #   schema:
      #     minimum: 0
      #     type: integer
      # - name: limit
      #   in: query
      #   description: maximum number of records to return
      #   schema:
      #     maximum: 50
      #     minimum: 0
      #     type: integer
      responses:
        200:
          description: event name displayed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventName'
        400:
          $ref: "#/components/responses/400BadRequest"
        404:
          $ref: "#/components/responses/404NotFound"  
  /group:
    post:
      tags:
      - group
      summary: create groups
      description: Creates a group
        Tasks
      operationId: createGroups
      security: []
      requestBody:
        description: Group to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroup'
        required: true
      responses:
        201:
          description: group created
          content:
            application/json:
              schema:
                required:
                - token
                type: object
                properties:
                  token:
                    type: string
                    format: uuid
        400:
          description: Invalid input, object invalid
          content: {}        
    put:
      tags:
      - group
      summary: edit a group
      description: Edits a group in the system
      operationId: editGroup
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: uuid
      - name: groupID
        in: path
        description: ID of the group to be deleted
        required: true
        schema:
          type: integer  
      requestBody:
        description: Group to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: false
      responses:
        201:
          description: Group updated
          content: {}
        404:
          $ref: "#/components/responses/404NotFound" 
    get:
      tags:
      - group
      summary: get Groups List
      description: By passing in the appropriate options, you can search for available Group
      operationId: getGroups
      # parameters:
      # - name: skip
      #   in: query
      #   description: number of records to skip for pagination
      #   schema:
      #     minimum: 0
      #     type: integer
      # - name: limit
      #   in: query
      #   description: maximum number of records to return
      #   schema:
      #     maximum: 50
      #     minimum: 0
      #     type: integer
      responses:
        200:
          description: get all groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        400:
          $ref: "#/components/responses/400BadRequest"   
  /group/{groupID}:
    delete:
      tags:
      - group
      summary: deletes a group
      description: Deletes a group of the system
      operationId: deleteGroup
      security: 
        - bearerAuth: []
      parameters:
      - name: GroupID
        in: path
        description: ID of the group to be deleted
        required: true
        schema:
          type: integer
      responses:
        200:
          description: group deleted
          content: {}
        400:
          $ref: "#/components/responses/400BadRequest"
        404:
          $ref: "#/components/responses/404NotFound"
  /group/add/{groupID}:
    put:
      tags:
      - group
      summary: add events to a group
      operationId: addEvents
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: uuid
      - name: eventId
        in: path
        description: ID of the event to be added
        required: true
        schema:
          type: integer
      responses:
        201:
          description: group added
          content: {}
        404:
          $ref: "#/components/responses/404NotFound"
  /group/remove/{eventID}:
    delete:
      tags:
      - group
      summary: Remove events from the group
      description: Removes an event of the group
      operationId: removeEvents
      security:
        - bearerAuth: []
      parameters:
      - name: eventID
        in: path
        description: ID of the event to be removed
        required: true
        schema:
          type: integer
      responses:
        200:
          description: "Event successfully deleted"
          content: {}
        400:
          $ref: "#/components/responses/400BadRequest"
        404:
          $ref: "#/components/responses/404NotFound"
  /user:
    description: The resource that contains all users
    post:
      tags:
      - user
      summary: Create a user
      description: Creates a User
      operationId: CreateUser
      security: []
      requestBody:
        description: User to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        required: true
      responses:
        201:
          description: user created
          content:
            application/json:
              schema:
                required:
                - token
                type: object
                properties:
                  token:
                    type: string
                    format: uuid
        400:
          description: Invalid input, object invalid
          content: {}
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
  schemas:
    EventName:
      required:
      - title
      - userId
      type: object
      properties:
        title:
          type: string
          example: Study Http
        description:
          type: string
          example: To develop web applications, knowing HTTP is fundamental
        userId:
          type: integer
          example: 1
    GroupName:
      required:
      - title
      - userId
      type: object
      properties:
        title:
          type: string
          example: Intro to WEB Programming
        description:
          type: string
          example: Develop yourself to get skills on back-end and front-end 
        userId:
          type: integer
          example: 1
    Event:
      allOf: 
        - $ref: "#/components/schemas/EventName"
        - type: object
          required:
          - id
          properties:
            id:
              type: integer
              example: 1
    Group:
      allOf: 
        - $ref: "#/components/schemas/GroupName"
        - type: object
          required:
          - id
          properties:
            id:
              type: integer
              example: 1
    CreateGroup:
      type: object
      required:
      - groupName
      properties:
        userName:
          type: string
          example: sports
    NewUser:
      type: object
      required:
      - userName
      properties:
        userName:
          type: string
          example: gonçalo*inacio
    MissingParameter:
      type: object
      properties:
        error:
          type: string
          example: "Missing required parameter"
    InvalidBody:
      type: object
      properties:
        error:
          type: string
          example: "Invalid body content"
    NotFound: 
      type: object
      properties:
        uri:
          type: string
          format: uri
          example: "/event/1"
        description:
          type: string
          example: "Event with id 1 not found"
  responses: 
    404NotFound:
      description: "Resource not found"
      content: 
        application/json:
          schema: 
            $ref: "#/components/schemas/NotFound"
    400BadRequest:
      description: "Invalid Request because of a missing Parameter or invalid body content"
      content: 
        application/json:
          schema: 
            oneOf:
              - $ref: "#/components/schemas/MissingParameter"
              - $ref: "#/components/schemas/InvalidBody"